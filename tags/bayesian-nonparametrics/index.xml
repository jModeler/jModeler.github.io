<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Bayesian Nonparametrics on Journeyman Modeler</title>
    <link>/tags/bayesian-nonparametrics/</link>
    <description>Recent content in Bayesian Nonparametrics on Journeyman Modeler</description>
    <generator>Source Themes Academic (https://sourcethemes.com/academic/)</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 02 May 2021 00:00:00 +0000</lastBuildDate>
    
	    <atom:link href="/tags/bayesian-nonparametrics/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Explaining the Dirichlet Draws Function</title>
      <link>/post/2021-05-02-explaining-the-dirichlet-draws-function/</link>
      <pubDate>Sun, 02 May 2021 00:00:00 +0000</pubDate>
      
      <guid>/post/2021-05-02-explaining-the-dirichlet-draws-function/</guid>
      <description>
&lt;script src=&#34;../../rmarkdown-libs/header-attrs/header-attrs.js&#34;&gt;&lt;/script&gt;


&lt;p&gt;This post is a continuation of the post that discusses the &lt;a href=&#34;https://jmodeler.github.io/post/2021-04-25-dirichlet-distribution-draws-function-with-rcpp-rcpparmadillo/&#34;&gt;dirichlet draws function&lt;/a&gt;. In this post I explain the function step by step, starting with the header files used:&lt;/p&gt;
&lt;div id=&#34;step-1-headers-needed&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Step 1: Headers Needed&lt;/h2&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;#include &amp;lt;RcppArmadillo.h&amp;gt;
// [[Rcpp::depends(RcppArmadillo)]]
using namespace Rcpp;

// [[Rcpp::export]]&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;As explained very well by &lt;a href=&#34;https://archive.fo/LwLVs&#34;&gt;Matt Denny&lt;/a&gt; &lt;a href=&#34;https://archive.fo/wCMHo&#34;&gt;here&lt;/a&gt;, this part of the code lets the compiler know where to look for the constructs being used in the body of the function. In addition, the “&lt;span class=&#34;math inline&#34;&gt;\(\texttt{//[[Rcpp::export]]}\)&lt;/span&gt;” statement makes the compiled function available for use in R.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;step-2-function-definition&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Step 2: Function Definition&lt;/h2&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;arma::mat rdirichlet_cpp(int n, arma::vec concentration_parameters) {
  // get n random draws from the dirichlet distribution
  // n: number of draws needed
  // concentration_parameters: self explanatory, needed parameters for the dirichlet
  // distribution
  // create a variable to store the length of the concentration_parameters vector&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Here, I’m creating the rdirichlet_cpp() function, that returns an armadillo matrix object, and takes an integer “n”, and an armadillo vector named “concentration_parameters”. These variables are described in a little more detail in the comments of the function. “n” contains the number of draws needed from the dirichlet distribution, while “concentration_parameters” is a vector containing values &lt;span class=&#34;math inline&#34;&gt;\(&amp;gt;0\)&lt;/span&gt;, described in detail &lt;a href=&#34;https://en.wikipedia.org/wiki/Dirichlet_distribution#The_concentration_parameter&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;step-3-function-body-variable-declarations&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Step 3: Function Body: Variable Declarations&lt;/h2&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;int k = concentration_parameters.n_elem;
  // next, create a matrix that will store the gamma draws
  // each row in this matrix will be a draw from the gamma distribution
  arma::mat gamma_draws(n, k, arma::fill::zeros);
  // create a matrix that stores the dirichlet distribution draws
  arma::mat dirichlet_draws(n, k, arma::fill::zeros);
  // create temporary variables that will store values in the loops
  // vector to store temporary gamma draws
  NumericVector temp_gamma(n);
  // variable to store the column sums of the gamma_draws matrix
  arma::vec temp_sum;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I create the following variables here:&lt;/p&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;k: this contains the length of the concentration_parameters variable.&lt;/li&gt;
&lt;li&gt;gamma_draws: this is an armadillo matrix of size &lt;span class=&#34;math inline&#34;&gt;\(n \,\, \times \,\, k\)&lt;/span&gt;, that will store draws from Rcpp’s &lt;span class=&#34;math inline&#34;&gt;\(\texttt{rgamma()}\)&lt;/span&gt; function. All of its elements are currently initialized to &lt;span class=&#34;math inline&#34;&gt;\(0\)&lt;/span&gt;.&lt;/li&gt;
&lt;li&gt;dirichlet_draws: this is an armadillo matrix of size &lt;span class=&#34;math inline&#34;&gt;\(n \,\, \times \,\, k\)&lt;/span&gt;, that will store draws from the dirichlet distribution needed. All of its elements are currently initialized to &lt;span class=&#34;math inline&#34;&gt;\(0\)&lt;/span&gt;.&lt;/li&gt;
&lt;li&gt;temp_gamma: this is an Rcpp &lt;span class=&#34;math inline&#34;&gt;\(\texttt{NumericVector}\)&lt;/span&gt;, that temporarily stores draws from the &lt;span class=&#34;math inline&#34;&gt;\(\texttt{rgamma()}\)&lt;/span&gt; function.&lt;/li&gt;
&lt;li&gt;temp_sum: this is an armadillo vector that contains the row sums of the “filled-out” gamma_draws matrix (will be explained in the next step).&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div id=&#34;step-4-function-body-generate-gamma-draws&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Step 4: Function Body: Generate Gamma Draws&lt;/h2&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt; // now, loop across the concentration parameters
  // get gamma draws and fill up the gamma_draws matrix
  for(int ii = 0; ii &amp;lt; k; ii++) {
    // get draws from gamma distribution, store in an armadillo vector
    temp_gamma = rgamma(n, concentration_parameters.at(ii));
    // temp_gamma is an Rcpp NumericVector, which needs to be converted into an armadillo vector and then
    // stored in the gamma_draws matrix
    gamma_draws.col(ii) = as&amp;lt;arma::vec&amp;gt;(temp_gamma);
  }&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In this part of the function body, I do the following:&lt;/p&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;I create a for loop to traverse through values &lt;span class=&#34;math inline&#34;&gt;\(0\)&lt;/span&gt; to &lt;span class=&#34;math inline&#34;&gt;\((k-1)\)&lt;/span&gt; (via variable &lt;span class=&#34;math inline&#34;&gt;\(ii\)&lt;/span&gt;).&lt;/li&gt;
&lt;li&gt;I extract the concentration parameter at the &lt;span class=&#34;math inline&#34;&gt;\(ii^{th}\)&lt;/span&gt; location, and get &lt;span class=&#34;math inline&#34;&gt;\(n\)&lt;/span&gt;, draws from Rcpp’s &lt;span class=&#34;math inline&#34;&gt;\(\texttt{rgamma()}\)&lt;/span&gt;, function and then store it in temp_gamma.&lt;/li&gt;
&lt;li&gt;I convert temp_gamma from a &lt;span class=&#34;math inline&#34;&gt;\(\texttt{NumericVector}\)&lt;/span&gt; to an armadillo vector object, and then store it in the &lt;span class=&#34;math inline&#34;&gt;\(ii^{th}\)&lt;/span&gt; column of the gamma_draws matrix. This is how I “fill-out” the gamma_draws matrix.&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div id=&#34;step-5-function-body-generate-dirichlet-draws&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Step 5: Function Body: Generate Dirichlet Draws&lt;/h2&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;  // now normalize the rows to get the dirichlet draws
  // element-wise normalization using the each_col() method for a matrix object in armadillo
  // create the vector of row sums
  temp_sum = arma::sum(gamma_draws, 1);
  // now divide each column of gamma_draws with the elements in temp_sum
  dirichlet_draws = gamma_draws.each_col() / temp_sum;
  // return this final value
  return dirichlet_draws;
  }&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Here, I now do the following:&lt;/p&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;I calculate the row sums of the gamma_draws (which has been “filled-out” in step 4 above) function using the &lt;span class=&#34;math inline&#34;&gt;\(\texttt{sum}\)&lt;/span&gt; function from the armadillo library, storing the results in temp_sum.&lt;/li&gt;
&lt;li&gt;I now apply a &lt;a href=&#34;http://arma.sourceforge.net/docs.html#each_colrow&#34;&gt;vector operation&lt;/a&gt; to each column of the gamma_draws matrix by the temp_sum vector, where each column of the gamma_draws matrix is divided by each corresponding element of the temp_sum vector. I store the results in the armadillo matrix dirichlet_draws.&lt;/li&gt;
&lt;li&gt;I return the dirichlet_draws matrix as the final output.&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Dirichlet Distribution Draws Function with Rcpp/RcppArmadillo</title>
      <link>/post/2021-04-25-dirichlet-distribution-draws-function-with-rcpp-rcpparmadillo/</link>
      <pubDate>Sun, 25 Apr 2021 00:00:00 +0000</pubDate>
      
      <guid>/post/2021-04-25-dirichlet-distribution-draws-function-with-rcpp-rcpparmadillo/</guid>
      <description>
&lt;script src=&#34;../../rmarkdown-libs/header-attrs/header-attrs.js&#34;&gt;&lt;/script&gt;


&lt;p&gt;This post constructs draws from a Dirichlet distribution from a gamma distribution with the help of Rcpp/RcppArmadillo. I’m writing this function to practice using C++ functions as opposed to their R counterparts when I see bottlenecks in my code. As explained in a &lt;a href=&#34;https://jmodeler.github.io/post/deriving-the-dirichlet-distribution-from-gamma-distributed-variables/&#34;&gt;previous post&lt;/a&gt;, the strategy to generate random draws from the Dirichlet distribution is as follows:&lt;/p&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;Generate data from a gamma distribution, with the shape parameter given by the concentration parameter of the Dirichlet distribution&lt;/li&gt;
&lt;li&gt;Once we have all the gamma draws, normalize appropriately to get the Dirichlet distribution draws&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The code for this, using Rcpp and RcppArmadillo, is given below:&lt;/p&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;#include &amp;lt;RcppArmadillo.h&amp;gt;
// [[Rcpp::depends(RcppArmadillo)]]
using namespace Rcpp;

// [[Rcpp::export]]
arma::mat rdirichlet_cpp(int n, arma::vec concentration_parameters) {
  // get n random draws from the dirichlet distribution
  // n: number of draws needed
  // concentration_parameters: self explanatory, needed parameters for the dirichlet
  // distribution
  // create a variable to store the length of the concentration_parameters vector
  int k = concentration_parameters.n_elem;
  // next, create a matrix that will store the gamma draws
  // each row in this matrix will be a draw from the gamma distribution
  arma::mat gamma_draws(n, k, arma::fill::zeros);
  // create a matrix that stores the dirichlet distribution draws
  arma::mat dirichlet_draws(n, k, arma::fill::zeros);
  // create temporary variables that will store values in the loops
  // vector to store temporary gamma draws
  NumericVector temp_gamma(n);
  // variable to store the column sums of the gamma_draws matrix
  arma::vec temp_sum;
  // now, loop across the concentration parameters
  // get gamma draws and fill up the gamma_draws matrix
  for(int ii = 0; ii &amp;lt; k; ii++) {
    // get draws from gamma distribution, store in an armadillo vector
    temp_gamma = rgamma(n, concentration_parameters.at(ii));
    // temp_gamma is an Rcpp NumericVector, which needs to be converted into an armadillo vector and then
    // stored in the gamma_draws matrix
    gamma_draws.col(ii) = as&amp;lt;arma::vec&amp;gt;(temp_gamma);
  }
  // now normalize the rows to get the dirichlet draws
  // element-wise normalization using the each_col() method for a matrix object in armadillo
  // create the vector of row sums
  temp_sum = arma::sum(gamma_draws, 1);
  // now divide each column of gamma_draws with the elements in temp_sum
  dirichlet_draws = gamma_draws.each_col() / temp_sum;
  // return this final value
  return dirichlet_draws;
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Let’s check to see if the mean vector of the draws obtained from this function are in-line with expectations:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(Rcpp)
library(RcppArmadillo)
# set number of data points needed
n &amp;lt;- 100000
# set dimension of data
k &amp;lt;- 3
# generate the concentration parameters 
alpha &amp;lt;- sample(1:100, k)
# calculate the actual mean vector
actual_mean = alpha/sum(alpha)
# get Dirichlet draws from the C++ function
dir_draws &amp;lt;- rdirichlet_cpp(n, alpha)
# get the column means
calculated_mean &amp;lt;- colMeans(dir_draws)
# compare both, should be close
(actual_mean - calculated_mean)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] -2.310840e-05 -1.599541e-05  3.910381e-05&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The calculated mean is close to the actual mean. In a series of future posts, I will explain this function in detail and compare the speed of this function to other similar functions.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Deriving the Beta Distribution from Gamma Distributed Variables</title>
      <link>/post/deriving-the-beta-distribution-from-gamma-distributed-variables/</link>
      <pubDate>Sat, 07 Sep 2019 00:00:00 +0000</pubDate>
      
      <guid>/post/deriving-the-beta-distribution-from-gamma-distributed-variables/</guid>
      <description>


&lt;p&gt;This post is a continuation of the post that proves the additive property of the &lt;a href=&#34;https://jmodeler.github.io/post/additive-property-of-the-gamma-distribution/&#34;&gt;Gamma distribution&lt;/a&gt;. We use the same parameterization of the Gamma Distribution as before, and set the rate parameter &lt;span class=&#34;math inline&#34;&gt;\(=1\)&lt;/span&gt; unless otherwise specified. In this post I prove that the following property holds:&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34; id=&#34;eq:BetaProp&#34;&gt;\[\begin{align}
\frac{X_i}{\sum_{i=1}^{N} X_i} \sim Beta(\alpha_i, \sum_{j \ne i} \alpha_j)   \tag{1} \\
 Where \, X_i \sim Gamma(\alpha_i, 1), \, \, \{i,j\} \in \{1,2, \dots, N\}  
\end{align}\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Where&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34; id=&#34;eq:BetaDis&#34; id=&#34;eq:GammaDis&#34;&gt;\[\begin{align}
Gamma(\alpha_i, 1) = f_{X_i}(x; \alpha_i) = \frac{1}{\Gamma(\alpha_i)}  x^{(\alpha_i -1)} e^{-x}                 \tag{2} \\
Beta(\alpha_i, \sum_{j \ne i} \alpha_j) = f_{Y}(y; \{\alpha_i\}_{i=1,\dots,N}) = \frac{\Gamma(\sum_{i=1}^{N} \alpha_i)}{\Gamma(\alpha_i) \Gamma(\sum_{j \ne i} \alpha_j)} y^{\alpha_i - 1} (1-y)^{(\sum_{j \ne i} \alpha_j - 1)}
\tag{3}
\end{align}\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Importantly, the &lt;span class=&#34;math inline&#34;&gt;\(X_i\)&lt;/span&gt;’s are independent. Let’s attempt to prove this for a small value of &lt;span class=&#34;math inline&#34;&gt;\(N\)&lt;/span&gt;. For &lt;span class=&#34;math inline&#34;&gt;\(N=1\)&lt;/span&gt;, the fraction in &lt;a href=&#34;#eq:BetaProp&#34;&gt;(1)&lt;/a&gt; is no longer random. For &lt;span class=&#34;math inline&#34;&gt;\(N=2\)&lt;/span&gt;, we derive the property in &lt;a href=&#34;#eq:BetaProp&#34;&gt;(1)&lt;/a&gt; from first principles. Let &lt;span class=&#34;math inline&#34;&gt;\(Y = \frac{X_1}{X_1 + X_2}\)&lt;/span&gt; where &lt;span class=&#34;math inline&#34;&gt;\(X_1\)&lt;/span&gt; and &lt;span class=&#34;math inline&#34;&gt;\(X_2\)&lt;/span&gt; are independent, Gamma distributed variables&lt;a href=&#34;#fn1&#34; class=&#34;footnote-ref&#34; id=&#34;fnref1&#34;&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt;. We try to obtain the distribution of &lt;span class=&#34;math inline&#34;&gt;\(Y\)&lt;/span&gt;:&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34; id=&#34;eq:YdisInit&#34;&gt;\[\begin{align}
P(Y \le y)  &amp;amp; =  P(\frac{X_1}{X_1 + X_2} \le y)   \nonumber \\
\implies P(Y \le y)  &amp;amp; = P(X_1 \le y(X_1 + X_2))   \nonumber \\
\implies P(Y \le y)  &amp;amp; = P(X_1 (1-y) \le y X_2))   \nonumber \\
\implies P(Y \le y)  &amp;amp; = P(X_1  \le \frac{y}{1-y} X_2))     \tag{4} 
\end{align}\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Using similar logic from the &lt;a href=&#34;https://jmodeler.github.io/post/additive-property-of-the-gamma-distribution/&#34;&gt;previous post&lt;/a&gt;, we know that the expression in &lt;a href=&#34;#eq:YdisInit&#34;&gt;(4)&lt;/a&gt; is a double integral, one to vary &lt;span class=&#34;math inline&#34;&gt;\(X_2\)&lt;/span&gt; over the range of values it can possibly take: &lt;span class=&#34;math inline&#34;&gt;\((0, \infty)\)&lt;/span&gt;, and the other to vary &lt;span class=&#34;math inline&#34;&gt;\(X_1\)&lt;/span&gt; from &lt;span class=&#34;math inline&#34;&gt;\((0, \frac{y}{1-y} X_2)\)&lt;/span&gt;. This integral takes the form below:&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34; id=&#34;eq:YInt&#34;&gt;\[\begin{align}
P(Y \le y) &amp;amp;  = P(X_1  \le \frac{y}{1-y} X_2)) = \int_{0}^{\infty} \left( \int_{0}^{\frac{y}{1-y} X_2}  \frac{1}{\Gamma(\alpha_1)}  x_{1}^{(\alpha_1 -1)} e^{-x_1} dX_1 \right)  \frac{1}{\Gamma(\alpha_2)}  x_{2}^{(\alpha_2 -1)} e^{-x_2} dX_2 \tag{5} 
\end{align}\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Note also, that the density of &lt;span class=&#34;math inline&#34;&gt;\(Y\)&lt;/span&gt; is given by:
&lt;span class=&#34;math display&#34; id=&#34;eq:Ydens&#34;&gt;\[\begin{align}
f_{Y}(y) &amp;amp;  = \frac{dP(Y \le y)}{dy}   \tag{6} 
\end{align}\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Applying the identity in &lt;a href=&#34;#eq:Ydens&#34;&gt;(6)&lt;/a&gt; to the integral in &lt;a href=&#34;#eq:YInt&#34;&gt;(5)&lt;/a&gt; and using the &lt;a href=&#34;https://en.wikipedia.org/wiki/Leibniz_integral_rule&#34;&gt;Leibniz integral rule&lt;/a&gt;, we get the following:&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34; id=&#34;eq:YdensForm&#34;&gt;\[\begin{align}
f_{Y}(y) &amp;amp;  = \frac{d}{dy} \int_{0}^{\infty} \left( \int_{0}^{\frac{y}{1-y} X_2}  \frac{1}{\Gamma(\alpha_1)}  x_{1}^{(\alpha_1 -1)} e^{-x_1} dX_1 \right)  \frac{1}{\Gamma(\alpha_2)}  x_{2}^{(\alpha_2 -1)} e^{-x_2} dX_2  \nonumber \\
\implies f_{Y}(y) &amp;amp;  = \int_{0}^{\infty} \left( \frac{1}{\Gamma(\alpha_1)}  \left( \frac{y}{1-y} x_2 \right)^{(\alpha_1 -1)} \frac{e^{-(\frac{y}{1-y} x_2)}}{(1-y)^2} x_2 \right)  \frac{1}{\Gamma(\alpha_2)}  x_{2}^{(\alpha_2 -1)} e^{-x_2} dX_2   \nonumber \\
\implies f_{Y}(y) &amp;amp;  = \frac{y^{\alpha_1 - 1} \int_{0}^{\infty} \left( x_2^{\alpha_1-1} e^{-(\frac{y}{1-y} x_2)} x_2 \right) x_{2}^{(\alpha_2 -1)}  e^{-x_2} dX_2}{\Gamma(\alpha_1) \Gamma(\alpha_2) (1-y)^{\alpha_1 - 1}(1-y)^2} \nonumber \\
\implies f_{Y}(y) &amp;amp;  = \frac{y^{\alpha_1 - 1}}{\Gamma(\alpha_1) \Gamma(\alpha_2) (1-y)^{\alpha_1 + 1}} \int_{0}^{\infty} x_{2}^{(\alpha_1 + \alpha_2 -1)} e^{-(\frac{x_2}{1-y})} dX_2 \tag{7} 
\end{align}\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;We now attempt to convert the integral in &lt;a href=&#34;#eq:YdensForm&#34;&gt;(7)&lt;/a&gt; into a form that is well known. We set &lt;span class=&#34;math inline&#34;&gt;\(Z = \frac{X_2}{1-y}\)&lt;/span&gt;, which gives us &lt;span class=&#34;math inline&#34;&gt;\(dX_2 = (1-y)dZ\)&lt;/span&gt;, and also note that &lt;span class=&#34;math inline&#34;&gt;\(Z\)&lt;/span&gt; can take the range of values bounded by the interval &lt;span class=&#34;math inline&#34;&gt;\((0,\infty)\)&lt;/span&gt; (&lt;span class=&#34;math inline&#34;&gt;\(Z \rightarrow 0\)&lt;/span&gt; as &lt;span class=&#34;math inline&#34;&gt;\(X_2 \rightarrow 0\)&lt;/span&gt; and &lt;span class=&#34;math inline&#34;&gt;\(Z \rightarrow \infty\)&lt;/span&gt; as &lt;span class=&#34;math inline&#34;&gt;\(X_2 \rightarrow \infty\)&lt;/span&gt;, since &lt;span class=&#34;math inline&#34;&gt;\(Y \rightarrow 0\)&lt;/span&gt;). Replacing &lt;span class=&#34;math inline&#34;&gt;\(X_2\)&lt;/span&gt; with &lt;span class=&#34;math inline&#34;&gt;\(Z\)&lt;/span&gt; in &lt;a href=&#34;#eq:YdensForm&#34;&gt;(7)&lt;/a&gt;, we get:&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34; id=&#34;eq:YdensTrans&#34;&gt;\[\begin{align}
f_{Y}(y) &amp;amp;  = \frac{y^{\alpha_1 - 1}}{\Gamma(\alpha_1) \Gamma(\alpha_2) (1-y)^{\alpha_1 + 1}} \int_{0}^{\infty} ((1-y)z)^{(\alpha_1 + \alpha_2 -1)} e^{-z} (1-y) dz \nonumber \\
\implies f_{Y}(y) &amp;amp;  = \frac{y^{\alpha_1 - 1} (1-y)^{(\alpha_1 + \alpha_2)}}{\Gamma(\alpha_1) \Gamma(\alpha_2) (1-y)^{\alpha_1 + 1}} \int_{0}^{\infty} z^{(\alpha_1 + \alpha_2 -1)} e^{-z} dz \nonumber \\
\implies f_{Y}(y) &amp;amp;  = \frac{y^{\alpha_1 - 1} (1-y)^{\alpha_2 - 1}}{\Gamma(\alpha_1) \Gamma(\alpha_2)} \int_{0}^{\infty} z^{(\alpha_1 + \alpha_2 -1)} e^{-z} dz \tag{8} 
\end{align}\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;The integral in &lt;a href=&#34;#eq:YdensTrans&#34;&gt;(8)&lt;/a&gt; is the &lt;a href=&#34;https://en.wikipedia.org/wiki/Gamma_function&#34;&gt;Gamma function&lt;/a&gt;, whose value is given below:&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34; id=&#34;eq:GammaForm&#34;&gt;\[\begin{align}
\int_{0}^{\infty} z^{(\alpha_1 + \alpha_2 -1)} e^{-z} dz = \Gamma(\alpha_1 + \alpha_2) \tag{9} 
\end{align}\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Substituting &lt;a href=&#34;#eq:GammaForm&#34;&gt;(9)&lt;/a&gt; back into &lt;a href=&#34;#eq:YdensTrans&#34;&gt;(8)&lt;/a&gt;, we get:
&lt;span class=&#34;math display&#34; id=&#34;eq:YdensFinal&#34;&gt;\[\begin{align}
f_{Y}(y) &amp;amp;  = \frac{y^{\alpha_1 - 1} (1-y)^{\alpha_2 - 1}}{\Gamma(\alpha_1) \Gamma(\alpha_2)} \Gamma(\alpha_1 + \alpha_2) \nonumber \\
\implies f_{Y}(y) &amp;amp;  = \frac{\Gamma(\alpha_1 + \alpha_2)}{\Gamma(\alpha_1) \Gamma(\alpha_2)} y^{\alpha_1 - 1} (1-y)^{\alpha_2 - 1}  \tag{10} \\
\implies f_{Y}(y) &amp;amp; = Beta(\alpha_1, \alpha_2) \nonumber
\end{align}\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;From &lt;a href=&#34;#eq:YdensFinal&#34;&gt;(10)&lt;/a&gt;, we have proved that the property in &lt;a href=&#34;#eq:BetaProp&#34;&gt;(1)&lt;/a&gt; holds for &lt;span class=&#34;math inline&#34;&gt;\(N=2\)&lt;/span&gt;. We now have to prove this for any general &lt;span class=&#34;math inline&#34;&gt;\(N\)&lt;/span&gt;. Now, let &lt;span class=&#34;math inline&#34;&gt;\(Z = \sum_{i=2}^{N} X_i\)&lt;/span&gt; and &lt;span class=&#34;math inline&#34;&gt;\(Y = \frac{X_1}{\sum_{i=1}^{N} X_i}\)&lt;/span&gt;, which gives us the following identities:&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34; id=&#34;eq:Zdist&#34; id=&#34;eq:YexpZ&#34; id=&#34;eq:XnplSum&#34;&gt;\[\begin{align}
\sum_{i=1}^{N} X_i &amp;amp;  = X_{1} + Z \tag{11} \\
\implies Y  &amp;amp; = \frac{X_1}{\sum_{i=1}^{N} X_i} = \frac{X_1}{X_1 + Z} \tag{12} \\
Z &amp;amp; \sim Gamma(\sum_{i=2}^{N} \alpha_i,1) \tag{13}
\end{align}\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Where the result in &lt;a href=&#34;#eq:Zdist&#34;&gt;(13)&lt;/a&gt; was proved in the &lt;a href=&#34;https://jmodeler.github.io/post/additive-property-of-the-gamma-distribution/&#34;&gt;previous post&lt;/a&gt;. We see that the form of &lt;span class=&#34;math inline&#34;&gt;\(Y\)&lt;/span&gt; from &lt;a href=&#34;#eq:YexpZ&#34;&gt;(12)&lt;/a&gt; is similar to that of &lt;span class=&#34;math inline&#34;&gt;\(Y\)&lt;/span&gt; in the &lt;span class=&#34;math inline&#34;&gt;\(N=2\)&lt;/span&gt; case. Applying the result for &lt;span class=&#34;math inline&#34;&gt;\(N=2\)&lt;/span&gt; to &lt;a href=&#34;#eq:YexpZ&#34;&gt;(12)&lt;/a&gt;, we get:&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34; id=&#34;eq:YZdensFinal&#34; id=&#34;eq:YZdist&#34;&gt;\[\begin{align}
Y &amp;amp; = \frac{X_1}{X_1 + Z} \sim Beta(\alpha_1, \sum_{i=2}^{N} \alpha_i)  \tag{14} \\
\implies  f_{Y}(y) &amp;amp; = \frac{\Gamma(\alpha_1 + \sum_{i=2}^{N} \alpha_i)}{\Gamma(\alpha_1) \Gamma(\sum_{i=2}^{N} \alpha_i)} y^{\alpha_1 - 1} (1-y)^{\sum_{i=2}^{N} \alpha_i - 1} \nonumber \\
\implies  f_{Y}(y) &amp;amp; = \frac{\Gamma(\sum_{i=1}^{N} \alpha_i)}{\Gamma(\alpha_1) \Gamma(\sum_{i=2}^{N} \alpha_i)} y^{\alpha_1 - 1} (1-y)^{\sum_{i=2}^{N} \alpha_i - 1} \tag{15}
\end{align}\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Which is what we set out to prove.&lt;/p&gt;
&lt;div class=&#34;footnotes&#34;&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id=&#34;fn1&#34;&gt;&lt;p&gt;Without loss of generality, I prove this property for &lt;span class=&#34;math inline&#34;&gt;\(i=1\)&lt;/span&gt;&lt;a href=&#34;#fnref1&#34; class=&#34;footnote-back&#34;&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Additive Property of the Gamma Distribution</title>
      <link>/post/additive-property-of-the-gamma-distribution/</link>
      <pubDate>Tue, 03 Sep 2019 00:00:00 +0000</pubDate>
      
      <guid>/post/additive-property-of-the-gamma-distribution/</guid>
      <description>


&lt;p&gt;While learning Bayesian Nonparametric methodology, I found a few properties useful in understanding the way Dirichlet Process Priors worked (this is a prior used very commonly in the field (&lt;span class=&#34;citation&#34;&gt;Ferguson (&lt;a href=&#34;#ref-ferguson1973bayesian&#34; role=&#34;doc-biblioref&#34;&gt;1973&lt;/a&gt;)&lt;/span&gt;, &lt;span class=&#34;citation&#34;&gt;Antoniak (&lt;a href=&#34;#ref-antoniak1974mixtures&#34; role=&#34;doc-biblioref&#34;&gt;1974&lt;/a&gt;)&lt;/span&gt;)) . This post will be one in a series that describes each of the aforementioned properties and provides simple proofs/examples of the same.&lt;/p&gt;
&lt;p&gt;As the title suggests, we start with the Gamma distribution. We use the shape and rate parameterization of the distribution (as explained &lt;a href=&#34;https://en.wikipedia.org/wiki/Gamma_distribution&#34;&gt;here&lt;/a&gt;). Without loss of generality in this case, we also set the rate parameter $ = 1$ for all random variables unless otherwise mentioned. We want to prove the additive property of the gamma distribution:&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34; id=&#34;eq:GammaSum&#34;&gt;\[\begin{align}
\sum_{i=1}^{N} X_i \sim Gamma(\sum_{i=1}^{N}\alpha_i, 1)                    \nonumber \\
 Where \, X_i \sim Gamma(\alpha_i, 1), \, \, i \in \{1,2, \dots, N\}  \tag{1} 
\end{align}\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Where
&lt;span class=&#34;math display&#34; id=&#34;eq:GammaFun&#34;&gt;\[\begin{align}
Gamma(\alpha_i, 1) = f_{X_i}(x; \alpha_i) = \frac{1}{\Gamma(\alpha_i)}  x^{(\alpha_i -1)} e^{-x}                 \tag{2} 
\end{align}\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Importantly, the &lt;span class=&#34;math inline&#34;&gt;\(X_i\)&lt;/span&gt;’s are independent. We prove the identity by induction. For &lt;span class=&#34;math inline&#34;&gt;\(N = 1\)&lt;/span&gt;, the property in &lt;a href=&#34;#eq:GammaSum&#34;&gt;(1)&lt;/a&gt; holds trivially. For &lt;span class=&#34;math inline&#34;&gt;\(N=2\)&lt;/span&gt;, we set about deriving this from first principles. Let &lt;span class=&#34;math inline&#34;&gt;\(Y = X_1 + X_2\)&lt;/span&gt;. We try to get the distribution of &lt;span class=&#34;math inline&#34;&gt;\(Y\)&lt;/span&gt;. The following holds for &lt;span class=&#34;math inline&#34;&gt;\(Y\)&lt;/span&gt;:&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34; id=&#34;eq:YdisInit&#34;&gt;\[\begin{align}
P(Y \le y)  &amp;amp; =  P(X_1 + X_2 \le y)   \nonumber \\
\implies P(Y \le y)  &amp;amp; = P(X_1 \le y - X_2)    \tag{3} 
\end{align}\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;If we knew the value of &lt;span class=&#34;math inline&#34;&gt;\(X_2\)&lt;/span&gt;, the expression in &lt;a href=&#34;#eq:YdisInit&#34;&gt;(3)&lt;/a&gt; is obtained by integrating the probability density of &lt;span class=&#34;math inline&#34;&gt;\(X_1\)&lt;/span&gt; over &lt;span class=&#34;math inline&#34;&gt;\((0, y-X_2)\)&lt;/span&gt;, given below:&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34; id=&#34;eq:x1dis&#34;&gt;\[\begin{align}
P(X_1 \le y-X_2|X_2 = x_2)  &amp;amp; =  \int_{0}^{y-x_2}  \frac{1}{\Gamma(\alpha_1)}  x_{1}^{(\alpha_1 -1)} e^{-x_1} dX_1 = F(y, X_2; \alpha_1)   \tag{4} 
\end{align}\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;However, since &lt;span class=&#34;math inline&#34;&gt;\(X_2\)&lt;/span&gt; is a random variable varying from &lt;span class=&#34;math inline&#34;&gt;\((0, \infty)\)&lt;/span&gt;, the value of the expression in &lt;a href=&#34;#eq:YdisInit&#34;&gt;(3)&lt;/a&gt; is the expectation of &lt;span class=&#34;math inline&#34;&gt;\(F(y, X_2; \alpha_1)\)&lt;/span&gt; with respect to &lt;span class=&#34;math inline&#34;&gt;\(X_2\)&lt;/span&gt;, given below:&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34; id=&#34;eq:ExpF&#34;&gt;\[\begin{align}
P(Y \le y) &amp;amp; = \int_{0}^{\infty} \left[ F(y, X_2;\alpha_1) \right]  \frac{1}{\Gamma(\alpha_2)}  x_{2}^{(\alpha_2 -1)} e^{-x_2} dX_2 \tag{5} 
\end{align}\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;The expression in &lt;a href=&#34;#eq:ExpF&#34;&gt;(5)&lt;/a&gt; is a double integral, one to vary &lt;span class=&#34;math inline&#34;&gt;\(X_2\)&lt;/span&gt; over the range of values it can possibly take: &lt;span class=&#34;math inline&#34;&gt;\((0, \infty)\)&lt;/span&gt;, and the other to vary &lt;span class=&#34;math inline&#34;&gt;\(X_1\)&lt;/span&gt; from &lt;span class=&#34;math inline&#34;&gt;\((0, y-X_2)\)&lt;/span&gt;. Putting &lt;a href=&#34;#eq:x1dis&#34;&gt;(4)&lt;/a&gt; in &lt;a href=&#34;#eq:ExpF&#34;&gt;(5)&lt;/a&gt;, we get:&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34; id=&#34;eq:YInt&#34;&gt;\[\begin{align}
P(Y \le y) &amp;amp;  = \int_{0}^{\infty} \left[ \int_{0}^{y-x_2}  \frac{1}{\Gamma(\alpha_1)}  x_{1}^{(\alpha_1 -1)} e^{-x_1} dX_1 \right]  \frac{1}{\Gamma(\alpha_2)}  x_{2}^{(\alpha_2 -1)} e^{-x_2} dX_2 \tag{6} 
\end{align}\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Note also, that the density of &lt;span class=&#34;math inline&#34;&gt;\(Y\)&lt;/span&gt; is given by:
&lt;span class=&#34;math display&#34; id=&#34;eq:Ydens&#34;&gt;\[\begin{align}
f_{Y}(y) &amp;amp;  = \frac{dP(Y \le y)}{dy}   \tag{7} 
\end{align}\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Applying the identity in &lt;a href=&#34;#eq:Ydens&#34;&gt;(7)&lt;/a&gt; to the integral in &lt;a href=&#34;#eq:YInt&#34;&gt;(6)&lt;/a&gt; and using the &lt;a href=&#34;https://en.wikipedia.org/wiki/Leibniz_integral_rule&#34;&gt;Leibniz integral rule&lt;/a&gt;, we get the following:&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34; id=&#34;eq:YdensForm&#34;&gt;\[\begin{align}
f_{Y}(y) &amp;amp;  = \frac{d}{dy} \int_{0}^{\infty} \left( \int_{0}^{y-x_2}  \frac{1}{\Gamma(\alpha_1)}  x_{1}^{(\alpha_1 -1)} e^{-x_1} dX_1 \right)  \frac{1}{\Gamma(\alpha_2)}  x_{2}^{(\alpha_2 -1)} e^{-x_2} dX_2 \nonumber \\
\implies f_{Y}(y) &amp;amp;  = \int_{0}^{\infty} \left( \frac{1}{\Gamma(\alpha_1)}  (y-x_2)^{(\alpha_1 -1)} e^{-(y-x_2)} \right)  \frac{1}{\Gamma(\alpha_2)}  x_{2}^{(\alpha_2 -1)} e^{-x_2} dX_2 \nonumber \\
\implies f_{Y}(y) &amp;amp;  = \int_{0}^{\infty} \frac{1}{\Gamma(\alpha_1)} \frac{1}{\Gamma(\alpha_2)} (y-x_2)^{(\alpha_1 -1)} x_{2}^{(\alpha_2 -1)} e^{-y} dX_2 \tag{8} 
\end{align}\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;We now attempt to convert the integral in &lt;a href=&#34;#eq:YdensForm&#34;&gt;(8)&lt;/a&gt; into a form that is well known. We set &lt;span class=&#34;math inline&#34;&gt;\(Z = \frac{X_2}{y}\)&lt;/span&gt;, which gives us &lt;span class=&#34;math inline&#34;&gt;\(dX_2 = ydZ\)&lt;/span&gt;, and also note that &lt;span class=&#34;math inline&#34;&gt;\(Z\)&lt;/span&gt; can take the range of values bounded by the interval &lt;span class=&#34;math inline&#34;&gt;\((0,1)\)&lt;/span&gt; (&lt;span class=&#34;math inline&#34;&gt;\(Z \rightarrow 0\)&lt;/span&gt; as &lt;span class=&#34;math inline&#34;&gt;\(X_2 \rightarrow 0\)&lt;/span&gt; and &lt;span class=&#34;math inline&#34;&gt;\(Z \rightarrow 1\)&lt;/span&gt; as &lt;span class=&#34;math inline&#34;&gt;\(X_2 \rightarrow \infty\)&lt;/span&gt;, since &lt;span class=&#34;math inline&#34;&gt;\(Y \rightarrow \infty\)&lt;/span&gt; too). Replacing &lt;span class=&#34;math inline&#34;&gt;\(X_2\)&lt;/span&gt; with &lt;span class=&#34;math inline&#34;&gt;\(Z\)&lt;/span&gt; in &lt;a href=&#34;#eq:YdensForm&#34;&gt;(8)&lt;/a&gt;, we get:&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34; id=&#34;eq:YdensTrans&#34;&gt;\[\begin{align}
f_{Y}(y) &amp;amp;  = \int_{0}^{1} \frac{1}{\Gamma(\alpha_1)} \frac{1}{\Gamma(\alpha_2)} (y- yz)^{(\alpha_1 -1)} (yz)^{(\alpha_2 -1)} e^{-y} ydZ \nonumber \\
\implies f_{Y}(y) &amp;amp;  = \int_{0}^{1} \frac{1}{\Gamma(\alpha_1)} \frac{1}{\Gamma(\alpha_2)} y^{(\alpha_1 -1)} (1- z)^{(\alpha_1 -1)} y^{(\alpha_2 -1)} z^{(\alpha_2 -1)} e^{-y} ydZ \nonumber \\
\implies f_{Y}(y) &amp;amp;  = \int_{0}^{1} \frac{1}{\Gamma(\alpha_1)} \frac{1}{\Gamma(\alpha_2)} y^{(\alpha_1 + \alpha_2 -1)} e^{-y} (1- z)^{(\alpha_1 -1)} z^{(\alpha_2 -1)}  dZ \nonumber \\
\implies f_{Y}(y) &amp;amp;  =  \frac{1}{\Gamma(\alpha_1)} \frac{1}{\Gamma(\alpha_2)} y^{(\alpha_1 + \alpha_2 -1)} e^{-y} \int_{0}^{1} (1- z)^{(\alpha_1 -1)} z^{(\alpha_2 -1)}  dZ \tag{9} 
\end{align}\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;The integral in &lt;a href=&#34;#eq:YdensTrans&#34;&gt;(9)&lt;/a&gt; is the &lt;a href=&#34;https://en.wikipedia.org/wiki/Beta_function&#34;&gt;Beta function&lt;/a&gt;, whose value is given below:&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34; id=&#34;eq:BetaForm&#34;&gt;\[\begin{align}
\int_{0}^{1} (1- z)^{(\alpha_1 -1)} z^{(\alpha_2 -1)}  dZ = \frac{\Gamma(\alpha_1)\Gamma(\alpha_2)}{\Gamma(\alpha_1 + \alpha_2)} \tag{10}
\end{align}\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Substituting &lt;a href=&#34;#eq:BetaForm&#34;&gt;(10)&lt;/a&gt; back into &lt;a href=&#34;#eq:YdensTrans&#34;&gt;(9)&lt;/a&gt;, we get:
&lt;span class=&#34;math display&#34; id=&#34;eq:YdensFinal&#34;&gt;\[\begin{align}
f_{Y}(y) &amp;amp;  =  \frac{1}{\Gamma(\alpha_1)} \frac{1}{\Gamma(\alpha_2)} y^{(\alpha_1 + \alpha_2 -1)} e^{-y}  \frac{\Gamma(\alpha_1)\Gamma(\alpha_2)}{\Gamma(\alpha_1 + \alpha_2)}\nonumber \\
\implies f_{Y}(y) &amp;amp;  =  \frac{1}{\Gamma(\alpha_1 + \alpha_2)} y^{(\alpha_1 + \alpha_2 -1)} e^{-y}  \tag{11} \\
\implies f_{Y}(y) &amp;amp; = Gamma(\alpha_1 + \alpha_2, 1) \nonumber
\end{align}\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;From &lt;a href=&#34;#eq:YdensFinal&#34;&gt;(11)&lt;/a&gt;, we have now proved that the property in &lt;a href=&#34;#eq:GammaSum&#34;&gt;(1)&lt;/a&gt; holds for &lt;span class=&#34;math inline&#34;&gt;\(N=2\)&lt;/span&gt;. We now assume this is true for &lt;span class=&#34;math inline&#34;&gt;\(N\)&lt;/span&gt; and show that this property holds for &lt;span class=&#34;math inline&#34;&gt;\(N+1\)&lt;/span&gt;. Now, let &lt;span class=&#34;math inline&#34;&gt;\(Y = \sum_{i=1}^{N} X_i\)&lt;/span&gt;, which gives us the following identities:&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34; id=&#34;eq:YNdist&#34; id=&#34;eq:XnplSum&#34;&gt;\[\begin{align}
\sum_{i=1}^{N+1} X_i &amp;amp;  = Y + X_{N+1} \tag{12} \\
Y &amp;amp; \sim Gamma(\sum_{i=1}^{N} \alpha_i,1) \tag{13}
\end{align}\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;#eq:YNdist&#34;&gt;(13)&lt;/a&gt; follows from the induction assumption. Since the property in &lt;a href=&#34;#eq:GammaSum&#34;&gt;(1)&lt;/a&gt; is true for &lt;span class=&#34;math inline&#34;&gt;\(N=2\)&lt;/span&gt;, we combine this with the identities in &lt;a href=&#34;#eq:XnplSum&#34;&gt;(12)&lt;/a&gt; &amp;amp; &lt;a href=&#34;#eq:YNdist&#34;&gt;(13)&lt;/a&gt; to get:&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34; id=&#34;eq:YNpldist&#34;&gt;\[\begin{align}
\sum_{i=1}^{N+1} X_i &amp;amp;  = Y + X_{N+1} \sim Gamma(\sum_{i=1}^{N} \alpha_i + \alpha_{N+1},1) \nonumber \\
\implies \sum_{i=1}^{N+1} X_i &amp;amp; \sim Gamma(\sum_{i=1}^{N+1} \alpha_i,1) \tag{14} 
\end{align}\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;#eq:YNpldist&#34;&gt;(14)&lt;/a&gt; shows that the property in &lt;a href=&#34;#eq:GammaSum&#34;&gt;(1)&lt;/a&gt; is true for &lt;span class=&#34;math inline&#34;&gt;\(N+1\)&lt;/span&gt;, completing the proof.&lt;/p&gt;
&lt;div id=&#34;references&#34; class=&#34;section level2 unnumbered&#34;&gt;
&lt;h2&gt;References&lt;/h2&gt;
&lt;div id=&#34;refs&#34; class=&#34;references&#34;&gt;
&lt;div id=&#34;ref-antoniak1974mixtures&#34;&gt;
&lt;p&gt;Antoniak, Charles E. 1974. “Mixtures of Dirichlet Processes with Applications to Bayesian Nonparametric Problems.” &lt;em&gt;The Annals of Statistics&lt;/em&gt;, 1152–74.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;ref-ferguson1973bayesian&#34;&gt;
&lt;p&gt;Ferguson, Thomas S. 1973. “A Bayesian Analysis of Some Nonparametric Problems.” &lt;em&gt;The Annals of Statistics&lt;/em&gt;, 209–30.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
  </channel>
</rss>
