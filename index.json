[{"authors":["admin"],"categories":null,"content":"I currently work as a Data Scientist and am interested in bringing together ideas from Economics, Statistics, Computer Science (and sometimes Physics) to help answer pertinent business questions.\n","date":-62135596800,"expirydate":-62135596800,"kind":"taxonomy","lang":"en","lastmod":-62135596800,"objectID":"2525497d367e79493fd32b198b28f040","permalink":"/authors/admin/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/authors/admin/","section":"authors","summary":"I currently work as a Data Scientist and am interested in bringing together ideas from Economics, Statistics, Computer Science (and sometimes Physics) to help answer pertinent business questions.","tags":null,"title":"Journeyman Modeler","type":"authors"},{"authors":[],"categories":["Scientific Computing"],"content":"\rI recently read a paper (Heiss and Winschel 2008) that advocated the use of certain techniques (Sparse Grids, SG henceforth) in numerical integration to calculate likelihood functions, as opposed to using Monte Carlo (MC henceforth) methods for the same. While approximating integrals with MC methods are simpler to implement, they might lead to integral values with considerable simulation error (Skrainka and Judd 2011). This post attempts to demonstrate the claim in Skrainka and Judd (2011) using two very simple integrals, to which we already know the value. I attempt to compare the outcomes from using MC and SG.\nThe integrals I’ll be evaluating are:\n\\[\\begin{equation}\r\\int_{-\\infty}^{\\infty} \\left( \\sum_{i=1}^{5} x_i \\right) dX \\tag{1} \\end{equation}\\]\nand\r\\[\\begin{equation}\r\\int_{-\\infty}^{\\infty} \\left( \\prod_{i=1}^{5} x_i^2 \\right) dX \\tag{2}\r\\end{equation}\\]\nwhere \\(X = \\{x_i\\}_{i=1}^{5}\\) is a five dimensional random variable, which is distributed according to the multivariate standard normal:\r\\[\rX \\sim N\\left( \\left[ \\begin{array}\r{r}\r0 \\\\\r0 \\\\\r0 \\\\\r0 \\\\\r0 \\\\\r\\end{array}\\right], \\left[ \\begin{array}\r{rrrrr}\r1 \u0026amp; 0 \u0026amp; 0 \u0026amp; 0 \u0026amp; 0 \\\\\r0 \u0026amp; 1 \u0026amp; 0 \u0026amp; 0 \u0026amp; 0 \\\\\r0 \u0026amp; 0 \u0026amp; 1 \u0026amp; 0 \u0026amp; 0 \\\\\r0 \u0026amp; 0 \u0026amp; 0 \u0026amp; 1 \u0026amp; 0 \\\\\r0 \u0026amp; 0 \u0026amp; 0 \u0026amp; 0 \u0026amp; 1 \\\\\r\\end{array}\\right] \\right)\r\\]\nGiven the distribution of \\(X\\), the values of the integrals above are easily obtained from standard results (the value of (1) is \\(0\\) and that of (2) is \\(1\\)) respectively.\nI write some utility functions in R to compute the integrands above:\n#function to compute the sum of components of the random vector\rs \u0026lt;- function(x)\r{\rreturn(sum(x))\r}\r#function to compute the square product of the components of the random vector\rp \u0026lt;- function(x)\r{\rreturn(prod(x^2))\r}\rI now write a function that:\n\rSimulates a certain number of draws from the distribution of the random variable \\(X\\)\rComputes the integrand function using each of these draws as input\rTakes the average of the values computed in the previous step\r\rThis function, in effect, would give us the approximate value of the integral via MC methodology.\nThe code is provided below, note that I use the mvtnorm package to create random draws.\nlibrary(mvtnorm)\r#Function to calculate the MC approximation for the integral\rmc_int \u0026lt;- function(s, n, mu, sigma)\r{\r#generate random draws\rx \u0026lt;- rmvnorm(n, mean = mu, sigma = sigma)\r#now get the integral\rmc_int_n \u0026lt;- mean(apply(x, 1, s))\rreturn(mc_int_n)\r}\rset.seed(100)\rn \u0026lt;- 1000\rmc_val \u0026lt;- mc_int(s, n, mu = rep(0,5), sigma = diag(5))\rmc_val\r## [1] 0.007150433\rThe result, 0.00715 is not far off from the true value of \\(0\\) at first glance, however, we need to compare this to the result from the SG approach.\nR has a package that generates sparse grids for numerical integration as described in Heiss and Winschel (2008), called SparseGrid. We now use the nodes and weights generated from this package to approximate the first integral.\rI re-use some of the code provided in the documentation for the SparseGrid package in R.\nlibrary(SparseGrid)\r#generate sparse grids for a 5 dimensional RV with accuracy level 2\rsg \u0026lt;- createSparseGrid(type=\u0026#39;KPN\u0026#39;, dimension=5, k=2)\rsg_int \u0026lt;- function(func, sg, ...)\r{\rgx \u0026lt;- apply(sg$nodes, 1, function(x) {func(x, ...)})\rreturn(sum(gx * sg$weights))\r}\rsg_val \u0026lt;- sg_int(s, sg)\rsg_val\r## [1] 0\rThe result here is exactly 0. In light of this finding, the value obtained from the MC approach, in comparison, is a little off, and tends to show a high variance in output:\nset.seed(100)\rmc_int(s, n, mu = rep(0,5), sigma = diag(5))\r## [1] 0.007150433\rmc_int(s, n, mu = rep(0,5), sigma = diag(5))\r## [1] 0.03162326\rmc_int(s, n, mu = rep(0,5), sigma = diag(5))\r## [1] -0.1287932\rmc_int(s, n, mu = rep(0,5), sigma = diag(5))\r## [1] 0.01040134\rmc_int(s, n, mu = rep(0,5), sigma = diag(5))\r## [1] -0.03798655\rIn the third case, there is a \\(-12\\%\\) error(!) in the value of the computed integral when compared to the result from the SG approach. The SG approach, in addition, shows no such variation in repeated runs, since the grid values and weights are fixed for a given accuracy level and dimension (of the variable being integrated).\nI repeat the calculations for the second integral, as shown below\rMC approach:\nset.seed(100)\rn \u0026lt;- 1000\rmc_val \u0026lt;- mc_int(p, n, mu = rep(0,5), sigma = diag(5))\rmc_val\r## [1] 1.001089\rSG approach:\n#generate sparse grids for a 5 dimensional RV with accuracy level 6\rsg \u0026lt;- createSparseGrid(type=\u0026#39;KPN\u0026#39;, dimension=5, k=6)\rsg_val \u0026lt;- sg_int(p, sg)\rsg_val\r## [1] 1\rOnce again, the SG approach gives us an exact value (note that the value of \\(k\\), the accuracy level, has gone up, since the integrand is a higher order function). Again, the difference of the results between the two approaches doesn’t seem that large. However, variability of the results from the MC approach is still a concern, as shown below:\nset.seed(100)\rmc_int(p, n, mu = rep(0,5), sigma = diag(5))\r## [1] 1.001089\rmc_int(p, n, mu = rep(0,5), sigma = diag(5))\r## [1] 0.4672555\rmc_int(p, n, mu = rep(0,5), sigma = diag(5))\r## [1] 1.14692\rmc_int(p, n, mu = rep(0,5), sigma = diag(5))\r## [1] 1.062975\rmc_int(p, n, mu = rep(0,5), sigma = diag(5))\r## [1] 0.9112416\rIn the second case, there is a roughly \\(53\\%\\) (!!) error when compared to the true value of the integral. This variability could be worse with more complicated integrands.\nOne suggestion to reduce variability in MC methods is to increase the number of draws, but that would entail a lot of calculations and result in longer runtimes.\nReferences\rGenz, Alan, Frank Bretz, Tetsuhisa Miwa, Xuefei Mi, Friedrich Leisch, Fabian Scheipl, and Torsten Hothorn. 2019. mvtnorm: Multivariate Normal and T Distributions. https://CRAN.R-project.org/package=mvtnorm.\n\rHeiss, Florian, and Viktor Winschel. 2008. “Likelihood Approximation by Numerical Integration on Sparse Grids.” Journal of Econometrics 144 (1): 62–80.\n\rSkrainka, Benjamin S, and Kenneth L Judd. 2011. “High Performance Quadrature Rules: How Numerical Integration Affects a Popular Model of Product Differentiation.” Available at SSRN 1870703.\n\r\r\r","date":1564272000,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1564620683,"objectID":"b808947d31eeb351808114760100dc6d","permalink":"/post/numerical-integration-with-sparse-grids/","publishdate":"2019-07-28T00:00:00Z","relpermalink":"/post/numerical-integration-with-sparse-grids/","section":"post","summary":"I recently read a paper (Heiss and Winschel 2008) that advocated the use of certain techniques (Sparse Grids, SG henceforth) in numerical integration to calculate likelihood functions, as opposed to using Monte Carlo (MC henceforth) methods for the same. While approximating integrals with MC methods are simpler to implement, they might lead to integral values with considerable simulation error (Skrainka and Judd 2011). This post attempts to demonstrate the claim in Skrainka and Judd (2011) using two very simple integrals, to which we already know the value.","tags":["Numerical Integration","Sparse Grids"],"title":"Numerical Integration With Sparse Grids","type":"post"}]