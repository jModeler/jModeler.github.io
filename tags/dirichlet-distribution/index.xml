<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Dirichlet Distribution on Journeyman Modeler</title>
    <link>/tags/dirichlet-distribution/</link>
    <description>Recent content in Dirichlet Distribution on Journeyman Modeler</description>
    <generator>Source Themes Academic (https://sourcethemes.com/academic/)</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 07 Jun 2020 00:00:00 +0000</lastBuildDate>
    
	    <atom:link href="/tags/dirichlet-distribution/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>A Useful Property of the Dirichlet Distribution</title>
      <link>/post/a-useful-property-of-the-dirichlet-distribution/</link>
      <pubDate>Sun, 07 Jun 2020 00:00:00 +0000</pubDate>
      
      <guid>/post/a-useful-property-of-the-dirichlet-distribution/</guid>
      <description>


&lt;p&gt;This post is a continuation of the post that constructs a &lt;a href=&#34;https://jmodeler.github.io/post/deriving-the-dirichlet-distribution-from-gamma-distributed-variables/&#34;&gt;Dirichlet distribution from Gamma distributed variables&lt;/a&gt;. We use the same parameterization of the Gamma Distribution as before, and set the rate parameter &lt;span class=&#34;math inline&#34;&gt;\(=1\)&lt;/span&gt; unless otherwise specified. In this post I prove that the following property holds:&lt;/p&gt;
&lt;p&gt;If &lt;span class=&#34;math inline&#34;&gt;\(U = (U_1,\dots,U_{i},U_{i+1}, \dots, U_{N}) \sim Dir(\alpha_1,\dots,\alpha_i,\alpha_{i+1},\dots, \alpha_N)\)&lt;/span&gt; then &lt;span class=&#34;math inline&#34;&gt;\(U&amp;#39; = (U_1,U_2,\dots,U_{i}+U_{i+1}, \dots, U_{N}) \sim Dir(\alpha_1,\alpha_2,\dots,\alpha_i+\alpha_{i+1},\dots, \alpha_N)\)&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;In general, &lt;span class=&#34;math inline&#34;&gt;\(U&amp;#39;&amp;#39; = (\sum\limits_{i=1}^{k_1} U_i, \sum\limits_{i=k_1+1}^{k_2} U_i, \dots, \sum\limits_{i=k_j+1}^{N} U_i ) \sim Dir(\sum\limits_{i=1}^{k_1} \alpha_i, \sum\limits_{i=k_1+1}^{k_2} \alpha_i, \dots, \sum\limits_{i=k_j+1}^{N} \alpha_i )\)&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;I prove the first part of this property here. The rest follows by simply extending the proof. The strategy here is to construct IID Gamma distributed variables with appropriate parameters, and then derive the distribution of &lt;span class=&#34;math inline&#34;&gt;\(U&amp;#39;\)&lt;/span&gt; using the results from the &lt;a href=&#34;https://jmodeler.github.io/post/deriving-the-dirichlet-distribution-from-gamma-distributed-variables/&#34;&gt;previous post&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Assume &lt;span class=&#34;math inline&#34;&gt;\(Z_i\)&lt;/span&gt;’s are IID &lt;span class=&#34;math inline&#34;&gt;\(\sim Gamma(\alpha_i,1)\)&lt;/span&gt;. From the &lt;a href=&#34;https://jmodeler.github.io/post/additive-property-of-the-gamma-distribution/&#34;&gt;additive property of the Gamma distribution&lt;/a&gt;, I have &lt;span class=&#34;math inline&#34;&gt;\(Z_{i,i+1} = Z_i + Z_{i+1} \sim Gamma(\alpha_i+\alpha_{i+1},1)\)&lt;/span&gt;. By definition, &lt;span class=&#34;math inline&#34;&gt;\(Z_{i,i+1}\)&lt;/span&gt; is independent of &lt;span class=&#34;math inline&#34;&gt;\(Z_j\)&lt;/span&gt;’s for &lt;span class=&#34;math inline&#34;&gt;\(1 \le j \le N, j \neq i, i+1\)&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;I now define &lt;span class=&#34;math inline&#34;&gt;\(U&amp;#39; = (U_1,U_2,\dots,U_{i}+U_{i+1}, \dots, U_{N}) = (U_1,U_2,\dots,U_{i,i+1}, \dots, U_{N})\)&lt;/span&gt;, where &lt;span class=&#34;math inline&#34;&gt;\(U_j = \frac{Z_j}{\sum\limits_{j\neq i, i+1}^{N} Z_j + Z_{i,i+1}}\)&lt;/span&gt;. From &lt;a href=&#34;https://jmodeler.github.io/post/deriving-the-dirichlet-distribution-from-gamma-distributed-variables/&#34;&gt;here&lt;/a&gt;, it follows that &lt;span class=&#34;math inline&#34;&gt;\(U&amp;#39; \sim Dir(\alpha_1,\alpha_2,\dots,\alpha_i+\alpha_{i+1},\dots, \alpha_N)\)&lt;/span&gt;. The second part of theorem  follows from similar reasoning.&lt;/p&gt;
&lt;p&gt;The result above can be used to get the marginal distributions of the &lt;span class=&#34;math inline&#34;&gt;\(U_i\)&lt;/span&gt;’s, where &lt;span class=&#34;math inline&#34;&gt;\(U = (U_1,\dots,U_i,\dots,U_N)\)&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;Define &lt;span class=&#34;math inline&#34;&gt;\(U&amp;#39; = (U_i, \sum\limits_{j \neq i}^{N} U_j)\)&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;From the result above, this is distributed &lt;span class=&#34;math inline&#34;&gt;\(Dir(\alpha_i, \sum\limits_{j \neq i}^{N} \alpha_j) = Beta(\alpha_i, \sum\limits_{j \neq i}^{N} \alpha_j)\)&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;Since &lt;span class=&#34;math inline&#34;&gt;\(\sum\limits_{j \neq i}^{N} U_j = 1 - U_i\)&lt;/span&gt;, the density function can be expressed purely as a function of &lt;span class=&#34;math inline&#34;&gt;\(U_i\)&lt;/span&gt;, which is the marginal distribution of &lt;span class=&#34;math inline&#34;&gt;\(U_i\)&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;Formally:&lt;/p&gt;
&lt;p&gt;If &lt;span class=&#34;math inline&#34;&gt;\(U = (U_1, \dots, U_{N}) \sim Dir(\alpha_1,\dots, \alpha_N)\)&lt;/span&gt; then &lt;span class=&#34;math inline&#34;&gt;\(U_i \sim Beta(\alpha_i, \sum\limits_{j \neq i}^{N} \alpha_j)\)&lt;/span&gt;&lt;/p&gt;
&lt;div id=&#34;the-complete-neutral-property-of-the-dirichlet-distribution&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;The Complete Neutral Property of the Dirichlet Distribution&lt;/h2&gt;
&lt;p&gt;A somewhat related property is also discussed here:&lt;/p&gt;
&lt;p&gt;If &lt;span class=&#34;math inline&#34;&gt;\(U = (U_1, \dots, U_{N}) \sim Dir(\alpha_1,\dots, \alpha_N)\)&lt;/span&gt; and when &lt;span class=&#34;math inline&#34;&gt;\(k &amp;lt; N\)&lt;/span&gt;, then&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math inline&#34;&gt;\(\frac{1}{(1-\sum\limits_{j = k+1}^{N} U_j)}(U_1,\dots,U_k) \sim Dir(\alpha_1,\dots,\alpha_k)\)&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Here, we note the term that divides each component of the vector &lt;span class=&#34;math inline&#34;&gt;\((U_1,\dots,U_k)\)&lt;/span&gt; is &lt;span class=&#34;math inline&#34;&gt;\((1-\sum\limits_{j = k+1}^{N} U_j)\)&lt;/span&gt;, which is nothing but &lt;span class=&#34;math inline&#34;&gt;\(\sum\limits_{j = 1}^{k} U_j\)&lt;/span&gt;, since &lt;span class=&#34;math inline&#34;&gt;\(\sum\limits_{j = 1}^{N} U_j = 1\)&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;Assume &lt;span class=&#34;math inline&#34;&gt;\(\{Z_i\}_{i=1}^{N}\)&lt;/span&gt;, are &lt;span class=&#34;math inline&#34;&gt;\(N\)&lt;/span&gt; IID Gamma distributed random variables, with &lt;span class=&#34;math inline&#34;&gt;\(Z_i \sim Gamma(\alpha_i,1) \, \forall \, i=1,\dots,N\)&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;In the post on &lt;a href=&#34;https://jmodeler.github.io/post/deriving-the-dirichlet-distribution-from-gamma-distributed-variables/&#34;&gt;constructing a dirichlet distribution from Gamma distributed variables&lt;/a&gt;, it was shown that when &lt;span class=&#34;math inline&#34;&gt;\(U_i = Z_i/(\sum\limits_{j = 1}^{N} Z_j) \, \forall \, i=1,\dots,N\)&lt;/span&gt;, then &lt;span class=&#34;math inline&#34;&gt;\(U = (U_1, \dots, U_{N}) \sim Dir(\alpha_1,\dots, \alpha_N)\)&lt;/span&gt;. With this construction, I now have:&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34; id=&#34;eq:gamconstr1&#34;&gt;\[\begin{align}
X_i =  \frac{U_i}{1-\sum\limits_{j = k+1}^{N} U_j} = \frac{U_i}{\sum\limits_{j = 1}^{k} U_j} \, \forall \, i=1,\dots,k  \tag{1} 
\end{align}\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Since &lt;span class=&#34;math inline&#34;&gt;\(U_i = Z_i/(\sum\limits_{j = 1}^{N} Z_j) \, \forall \, i=1,\dots,N\)&lt;/span&gt;, I put this in &lt;a href=&#34;#eq:gamconstr1&#34;&gt;(1)&lt;/a&gt; to get:&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34; id=&#34;eq:gamconstr2&#34;&gt;\[\begin{align}
X_i = \frac{U_i}{\sum\limits_{j = 1}^{k} U_j} = \frac{Z_i}{\sum\limits_{j = 1}^{k} Z_j}  \, \forall \, i=1,\dots,k  \tag{2}
\end{align}\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;From the post on &lt;a href=&#34;https://jmodeler.github.io/post/deriving-the-dirichlet-distribution-from-gamma-distributed-variables/&#34;&gt;constructing a dirichlet distribution from Gamma distributed variables&lt;/a&gt;, we know that &lt;span class=&#34;math inline&#34;&gt;\(X = (X_1,\dots, X_k) \sim Dir(\alpha_1,\dots,\alpha_k)\)&lt;/span&gt;, which completes the proof. This property of the Dirichlet Distribution is also called the &lt;span class=&#34;math inline&#34;&gt;\(\textit{complete neutral property}\)&lt;/span&gt; &lt;span class=&#34;citation&#34;&gt;(Albert and Denis &lt;a href=&#34;#ref-albert2011dirichlet&#34; role=&#34;doc-biblioref&#34;&gt;2011&lt;/a&gt;)&lt;/span&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;references&#34; class=&#34;section level2 unnumbered&#34;&gt;
&lt;h2&gt;References&lt;/h2&gt;
&lt;div id=&#34;refs&#34; class=&#34;references&#34;&gt;
&lt;div id=&#34;ref-albert2011dirichlet&#34;&gt;
&lt;p&gt;Albert, Isabelle, and Jean-Baptiste Denis. 2011. “Dirichlet and multinomial distributions: properties and uses in JAGS.” &lt;em&gt;Analysis&lt;/em&gt; 31: 1141–55.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Deriving the Dirichlet Distribution from Gamma Distributed Variables</title>
      <link>/post/deriving-the-dirichlet-distribution-from-gamma-distributed-variables/</link>
      <pubDate>Sun, 31 May 2020 00:00:00 +0000</pubDate>
      
      <guid>/post/deriving-the-dirichlet-distribution-from-gamma-distributed-variables/</guid>
      <description>


&lt;p&gt;This post is a continuation of the post that constructs a &lt;a href=&#34;https://jmodeler.github.io/post/deriving-the-beta-distribution-from-gamma-distributed-variables/&#34;&gt;Beta distribution from Gamma distributed variables&lt;/a&gt;. We use the same parameterization of the Gamma Distribution as before, and set the rate parameter &lt;span class=&#34;math inline&#34;&gt;\(=1\)&lt;/span&gt; unless otherwise specified. In this post I prove that the following property holds:&lt;/p&gt;
&lt;p&gt;Given &lt;span class=&#34;math inline&#34;&gt;\(Z_i \sim Gamma(\alpha_i,1)\)&lt;/span&gt;, are IID, (&lt;span class=&#34;math inline&#34;&gt;\(\alpha_i &amp;gt; 0\)&lt;/span&gt; and &lt;span class=&#34;math inline&#34;&gt;\(1 \le i \le n\)&lt;/span&gt;) and I define the variables &lt;span class=&#34;math inline&#34;&gt;\(U_i = \frac{Z_i}{\sum\limits_{i=1}^{N} Z_i}\)&lt;/span&gt; and &lt;span class=&#34;math inline&#34;&gt;\(V = \sum\limits_{i=1}^{N} Z_i\)&lt;/span&gt;. Then:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span class=&#34;math inline&#34;&gt;\((U_1, U_2, \dots, U_N) \sim Dir(\alpha_1, \alpha_2, \dots, \alpha_N) = \frac{\Gamma(\sum \alpha_i)}{\Gamma(\alpha_1)\dots \Gamma(\alpha_N)} u_1^{\alpha_1-1}u_2^{\alpha_1-1}\dots u_N^{\alpha_N-1} = \frac{\Gamma(\sum \alpha_i)}{\Gamma(\alpha_1)\dots \Gamma(\alpha_N)} u_1^{\alpha_1-1}u_2^{\alpha_1-1}\dots (1-\sum\limits_{i=1}^{N-1}u_i)^{\alpha_N-1}\)&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;math inline&#34;&gt;\(V \sim Gamma(\sum\limits_{i=1}^{N} \alpha_i, 1)\)&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;math inline&#34;&gt;\(U = (U_1, U_2, \dots, U_N)\)&lt;/span&gt; and &lt;span class=&#34;math inline&#34;&gt;\(V\)&lt;/span&gt; are independent&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;By construction, &lt;span class=&#34;math inline&#34;&gt;\(\sum\limits_{i=1}^{N} U_i = 1\)&lt;/span&gt;. The &lt;span class=&#34;math inline&#34;&gt;\(N^{th}\)&lt;/span&gt; term is redundant (in the sense that it can be obtained from the remaining &lt;span class=&#34;math inline&#34;&gt;\((N-1)\)&lt;/span&gt; terms). I use the &lt;a href=&#34;http://andymiller.github.io/2015/08/09/integral-jacobian.html&#34;&gt;change of variables approach&lt;/a&gt; to find the joint distribution of &lt;span class=&#34;math inline&#34;&gt;\((U_1,U_2,\dots,U_{N-1}, V)\)&lt;/span&gt;. I represent the &lt;span class=&#34;math inline&#34;&gt;\(Z_i\)&lt;/span&gt;’s as functions of &lt;span class=&#34;math inline&#34;&gt;\(U_i\)&lt;/span&gt; and &lt;span class=&#34;math inline&#34;&gt;\(V\)&lt;/span&gt; to get:&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34; id=&#34;eq:zureln2&#34; id=&#34;eq:zureln1&#34;&gt;\[\begin{align}
Z_i &amp;amp; =   U_i V &amp;amp;&amp;amp; 0 \le i \le N-1  \tag{1}\\ 
Z_N &amp;amp; =  (1-\sum_{i=1}^{N-1}U_i)V &amp;amp;&amp;amp;  \tag{2}
\end{align}\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;By definition, the joint density of &lt;span class=&#34;math inline&#34;&gt;\((U_1,U_2,\dots,U_{N-1}, V)\)&lt;/span&gt; is given by:
&lt;span class=&#34;math display&#34; id=&#34;eq:chovn&#34;&gt;\[\begin{align}
f_{U_1,U_2,\dots,U_{N-1}, V}(u_1,u_2,\dots, u_{N-1}, v) &amp;amp;= f_{Z_1,\dots,Z_N}(z_1,\dots,z_N) |J_{(z_1,z_2,\dots,z_{N-1},z_N) \rightarrow (u_1,u_2,\dots, u_{N-1}, v)}| &amp;amp; \tag{3}
\end{align}\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;The Jacobian matrix is given by:
&lt;span class=&#34;math display&#34; id=&#34;eq:njaco&#34;&gt;\[\begin{align}
J_{(z_1,z_2,\dots,z_{N-1},z_N) \rightarrow (u_1,u_2,\dots, u_{N-1}, v)} = 
\begin{bmatrix} 
\frac{\partial z_1}{\partial u_1} &amp;amp; \frac{\partial z_1}{\partial u_2} &amp;amp; \dots &amp;amp; \frac{\partial z_1}{\partial u_{N-1}} &amp;amp; \frac{\partial z_1}{\partial v} \\ 
\frac{\partial z_2}{\partial u_1} &amp;amp; \frac{\partial z_2}{\partial u_2} &amp;amp; \dots &amp;amp; \frac{\partial z_2}{\partial u_{N-1}} &amp;amp; \frac{\partial z_2}{\partial v} \\
\vdots &amp;amp; \vdots &amp;amp; \ddots &amp;amp; \vdots &amp;amp; \vdots \\
\frac{\partial z_{N-1}}{\partial u_1} &amp;amp; \frac{\partial z_{N-1}}{\partial u_2} &amp;amp; \dots &amp;amp; \frac{\partial z_{N-1}}{\partial u_{N-1}} &amp;amp; \frac{\partial z_{N-1}}{\partial v} \\
\frac{\partial z_N}{\partial u_1} &amp;amp; \frac{\partial z_N}{\partial u_2} &amp;amp; \dots &amp;amp; \frac{\partial z_N}{\partial u_N} &amp;amp; \frac{\partial z_N}{\partial v} 
\end{bmatrix} \tag{4}
\end{align}\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Given &lt;a href=&#34;#eq:zureln1&#34;&gt;(1)&lt;/a&gt; &amp;amp; &lt;a href=&#34;#eq:zureln2&#34;&gt;(2)&lt;/a&gt;, the partial derivatives in the Jacobian matrix  are given by&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34; id=&#34;eq:parzureln5&#34; id=&#34;eq:parzureln4&#34; id=&#34;eq:parzureln3&#34; id=&#34;eq:parzureln2&#34; id=&#34;eq:parzureln1&#34;&gt;\[\begin{alignat}{2}
\frac{\partial z_i}{\partial u_i} &amp;amp; =  v &amp;amp;&amp;amp; \quad 0 \le i \le N-1  \tag{5}\\
\frac{\partial z_i}{\partial u_j} &amp;amp; =  0 &amp;amp;&amp;amp; \quad j \neq i, 0 \le j \le N-1  \tag{6}\\
\frac{\partial z_i}{\partial v} &amp;amp; = u_i &amp;amp;&amp;amp; \quad 0 \le i \le N-1 \tag{7} \\
\frac{\partial z_N}{\partial u_i} &amp;amp; = -v &amp;amp;&amp;amp; \quad 0 \le i \le N-1 \tag{8} \\
\frac{\partial z_N}{\partial v} &amp;amp; = 1-\sum_{i=1}^{N-1} u_i  \tag{9}
\end{alignat}\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Substituting &lt;a href=&#34;#eq:parzureln1&#34;&gt;(5)&lt;/a&gt;, &lt;a href=&#34;#eq:parzureln2&#34;&gt;(6)&lt;/a&gt;, &lt;a href=&#34;#eq:parzureln3&#34;&gt;(7)&lt;/a&gt;, &lt;a href=&#34;#eq:parzureln4&#34;&gt;(8)&lt;/a&gt; &amp;amp; &lt;a href=&#34;#eq:parzureln5&#34;&gt;(9)&lt;/a&gt; in &lt;a href=&#34;#eq:njaco&#34;&gt;(4)&lt;/a&gt;, we get
&lt;span class=&#34;math display&#34; id=&#34;eq:njaco1&#34;&gt;\[\begin{align}
J_{(z_1,z_2,\dots,z_{N-1},z_N) \rightarrow (u_1,u_2,\dots, u_{N-1}, v)} = 
\begin{bmatrix} 
v &amp;amp; 0 &amp;amp; \dots &amp;amp; 0 &amp;amp; u_1 \\ 
0 &amp;amp; v &amp;amp; \dots &amp;amp; 0 &amp;amp; u_2 \\
\vdots &amp;amp; \vdots &amp;amp; \ddots &amp;amp; \vdots &amp;amp; \vdots \\
0 &amp;amp; 0 &amp;amp; \dots &amp;amp; v &amp;amp; u_{N-1} \\
-v &amp;amp; -v &amp;amp; \dots &amp;amp; -v &amp;amp; 1-\sum_{i=1}^{N-1} u_i  
\end{bmatrix} \tag{10}
\end{align}\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;I need the determinant of the Jacobian matrix above. This can be computed easily after making a row transformation operation. Apply the transformation &lt;span class=&#34;math inline&#34;&gt;\(R_N \rightarrow R_N + \sum\limits_{i=1}^{N-1} R_i\)&lt;/span&gt; (where &lt;span class=&#34;math inline&#34;&gt;\(R_i\)&lt;/span&gt; is the &lt;span class=&#34;math inline&#34;&gt;\(i^{th}\)&lt;/span&gt; row of the determinant) to get:&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34; id=&#34;eq:njacosimple&#34;&gt;\[\begin{align}
|J_{(z_1,z_2,\dots,z_{N-1},z_N) \rightarrow (u_1,u_2,\dots, u_{N-1}, v)}| = 
\begin{vmatrix} 
v &amp;amp; 0 &amp;amp; \dots &amp;amp; 0 &amp;amp; u_1 \\ 
0 &amp;amp; v &amp;amp; \dots &amp;amp; 0 &amp;amp; u_2 \\
\vdots &amp;amp; \vdots &amp;amp; \ddots &amp;amp; \vdots &amp;amp; \vdots \\
0 &amp;amp; 0 &amp;amp; \dots &amp;amp; v &amp;amp; u_{N-1} \\
0 &amp;amp; 0 &amp;amp; \dots &amp;amp; 0 &amp;amp; 1  
\end{vmatrix} = v^{N-1}  \tag{11}
\end{align}\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Using result &lt;a href=&#34;#eq:njacosimple&#34;&gt;(11)&lt;/a&gt; in &lt;a href=&#34;#eq:chovn&#34;&gt;(3)&lt;/a&gt;, I get:&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34; id=&#34;eq:nchovint&#34;&gt;\[\begin{align}
f_{U_1,U_2,\dots,U_{N-1}, V}(u_1,u_2,\dots, u_{N-1}, v) = f_{Z_1,Z_2,\dots,Z_{N-1},Z_N}(z_1,z_2,\dots,z_{N-1},z_N) v^{N-1} \tag{12}
\end{align}\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Since &lt;span class=&#34;math inline&#34;&gt;\(Z_i\)&lt;/span&gt; are IID &lt;span class=&#34;math inline&#34;&gt;\(Gamma(\alpha_i,1)\)&lt;/span&gt; distributed:
&lt;span class=&#34;math display&#34; id=&#34;eq:ngamma&#34;&gt;\[\begin{align}
f_{Z_1,\dots,Z_N}(z_1,\dots,z_N) = \prod_{i=1}^{N}f_{Z_i}(z_i) = \prod_{i=1}^{N} \frac{1}{\Gamma(\alpha_i)} z_i^{\alpha_i - 1} e^{-z_i} = \left[ \prod_{i=1}^{N} \frac{1}{\Gamma(\alpha_i)} z_i^{\alpha_i - 1} \right] e^{-\sum\limits_{i=1}^{N}z_i} \tag{13}
\end{align}\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Substituting &lt;a href=&#34;#eq:ngamma&#34;&gt;(13)&lt;/a&gt; into &lt;a href=&#34;#eq:nchovint&#34;&gt;(12)&lt;/a&gt;, and using the relations in &lt;a href=&#34;#eq:zureln1&#34;&gt;(1)&lt;/a&gt; &amp;amp; &lt;a href=&#34;#eq:zureln2&#34;&gt;(2)&lt;/a&gt;:
&lt;span class=&#34;math display&#34; id=&#34;eq:nchovint1&#34;&gt;\[\begin{align}
f_{U_1,\dots,U_{N-1}, V}(u_1,\dots, u_{N-1}, v)  =  &amp;amp; \left[ \prod_{i=1}^{N} \frac{1}{\Gamma(\alpha_i)} z_i^{\alpha_i - 1} \right] e^{-\sum\limits_{i=1}^{N}z_i} \cdot v^{N-1} &amp;amp; \nonumber \\
\implies f_{U_1,\dots,U_{N-1}, V}(u_1,\dots, u_{N-1}, v)  = &amp;amp; \left[ \prod_{i=1}^{N-1} \frac{1}{\Gamma(\alpha_i)} z_i^{\alpha_i - 1} \right] \frac{1}{\Gamma(\alpha_N)} z_N^{\alpha_N - 1} e^{-v}  v^{N-1} &amp;amp; \nonumber \\
\implies f_{U_1,\dots,U_{N-1}, V}(u_1,\dots, u_{N-1}, v)  = &amp;amp; \left[ \prod_{i=1}^{N-1} \frac{1}{\Gamma(\alpha_i)} (u_i v)^{\alpha_i - 1} \right] \frac{1}{\Gamma(\alpha_N)} (v(1-\sum\limits_{i=1}^{N-1}u_i))^{\alpha_N - 1} e^{-v}  v^{N-1} &amp;amp;  \tag{14}
\end{align}\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Since &lt;span class=&#34;math inline&#34;&gt;\(U_N = 1 - \sum\limits_{i=1}^{N-1}U_i\)&lt;/span&gt;, I put this in &lt;a href=&#34;#eq:nchovint1&#34;&gt;(14)&lt;/a&gt; to get
&lt;span class=&#34;math display&#34;&gt;\[\begin{align}
 f_{U_1,\dots,U_{N-1}, V}(u_1,\dots, u_{N-1}, v) &amp;amp; = \left[ \prod_{i=1}^{N-1} \frac{1}{\Gamma(\alpha_i)} (u_i v)^{\alpha_i - 1} \right] \frac{1}{\Gamma(\alpha_N)} (u_N v)^{\alpha_N - 1} e^{-v}  v^{N-1} &amp;amp; \nonumber \\
\implies f_{U_1,\dots,U_{N-1}, V}(u_1,\dots, u_{N-1}, v) &amp;amp; = \left[ \prod_{i=1}^{N} \frac{1}{\Gamma(\alpha_i)} (u_i v)^{\alpha_i - 1} \right] e^{-v}  v^{N-1} &amp;amp; \nonumber \\
\implies f_{U_1,\dots,U_{N-1}, V}(u_1,\dots, u_{N-1}, v) &amp;amp; = \left[ \prod_{i=1}^{N} \frac{1}{\Gamma(\alpha_i)} (u_i)^{\alpha_i - 1} \right] v^{\left(\sum\limits_{i=1}^{N}\alpha_i-N \right)} e^{-v}  v^{N-1} &amp;amp; \nonumber \\
\implies f_{U_1,\dots,U_{N-1}, V}(u_1,\dots, u_{N-1}, v) &amp;amp; = \left[ \prod_{i=1}^{N} \frac{1}{\Gamma(\alpha_i)} (u_i)^{\alpha_i - 1} \right] v^{\left(\sum\limits_{i=1}^{N}\alpha_i-1 \right)} e^{-v}  &amp;amp; \nonumber 
\end{align}\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[\begin{align}
\implies f_{U_1,\dots,U_{N-1}, V}(u_1,\dots, u_{N-1}, v) &amp;amp; =  \Gamma \left(\sum\limits_{i=1}^{N}\alpha_i \right) \left[ \prod_{i=1}^{N} \frac{1}{\Gamma(\alpha_i)} (u_i)^{\alpha_i - 1} \right] \frac{1}{\Gamma \left(\sum\limits_{i=1}^{N}\alpha_i \right)}v^{\left(\sum\limits_{i=1}^{N}\alpha_i-1 \right)} e^{-v}  &amp;amp; \nonumber \\
\implies f_{U_1,\dots,U_{N-1}, V}(u_1,\dots, u_{N-1}, v) &amp;amp; =  \frac{\Gamma \left(\sum\limits_{i=1}^{N}\alpha_i \right)}{\prod\limits_{i=1}^{N} \Gamma(\alpha_i)} \left[ \prod_{i=1}^{N} (u_i)^{\alpha_i - 1} \right] \frac{1}{\Gamma \left(\sum\limits_{i=1}^{N}\alpha_i \right)}v^{\left(\sum\limits_{i=1}^{N}\alpha_i-1 \right)} e^{-v}  &amp;amp; \nonumber \\
\implies f_{U_1,\dots,U_{N-1}, V}(u_1,\dots, u_{N-1}, v) &amp;amp; =  Dir(\alpha_1,\alpha_2, \dots, \alpha_N) \cdot Gamma(\sum\limits_{i=1}^{N}\alpha_i, 1)  &amp;amp; 
\end{align}\]&lt;/span&gt;

Which establishes the following:&lt;/p&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;&lt;span class=&#34;math inline&#34;&gt;\((U_1,U_2,\dots,U_{N-1}, U_{N}) \sim Dir(\alpha_1,\alpha_2, \dots, \alpha_N)\)&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;math inline&#34;&gt;\(V \sim Gamma(\sum\limits_{i=1}^{N}\alpha_i,1)\)&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;math inline&#34;&gt;\(U = (U_1,U_2,\dots,U_{N-1}, U_{N})\)&lt;/span&gt; &amp;amp; &lt;span class=&#34;math inline&#34;&gt;\(V\)&lt;/span&gt; are independent&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;This completes the proof.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Dirichlet Distribution from Gamma Distribution: Simple Examples</title>
      <link>/post/dirichlet-distribution-from-gamma-distribution-simple-examples/</link>
      <pubDate>Sun, 31 May 2020 00:00:00 +0000</pubDate>
      
      <guid>/post/dirichlet-distribution-from-gamma-distribution-simple-examples/</guid>
      <description>


&lt;p&gt;This post is a continuation of the post that constructs a &lt;a href=&#34;https://jmodeler.github.io/post/deriving-the-dirichlet-distribution-from-gamma-distributed-variables/&#34;&gt;Dirichlet distribution from Gamma distributed variables&lt;/a&gt;. I now provide an empirical example of this construction for a simple case. In all of the work that follows, Unless otherwise specified, the rate parameter for the Gamma distribution is 1.&lt;/p&gt;
&lt;p&gt;I follow the steps below to do this:&lt;/p&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;Generate data from a gamma distribution&lt;/li&gt;
&lt;li&gt;Apply the appropriate transformation to these&lt;/li&gt;
&lt;li&gt;Check the distribution of the transformed variables&lt;/li&gt;
&lt;li&gt;Compare against data generated from a Dirichlet distribution with appropriate parameters&lt;/li&gt;
&lt;/ol&gt;
&lt;div id=&#34;preliminaries&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Preliminaries&lt;/h1&gt;
&lt;p&gt;I write a function that generates IID draws from &lt;span class=&#34;math inline&#34;&gt;\(d\)&lt;/span&gt; different gamma distributions, all with rate parameter = 1. Note that this is purely a utility function with no sanity checks on the input.
In the code below, the parameter &lt;span class=&#34;math inline&#34;&gt;\(d\)&lt;/span&gt; is implicit, in that it is the length of the vector of shape parameters, &lt;span class=&#34;math inline&#34;&gt;\(alpha\)&lt;/span&gt;, which is being sent as an input (all the elements in the vector &lt;span class=&#34;math inline&#34;&gt;\(alpha\)&lt;/span&gt; must be &lt;span class=&#34;math inline&#34;&gt;\(&amp;gt;0\)&lt;/span&gt;).&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;#Function to generate n random draws of dimension from d different gamma distributions

mv_gamma &amp;lt;- function(rgamma, n, alpha)
{
  # rgamma: the base r function to generate random draws from a univariate gamma distribution
  # n: number of draws needed
  # alpha: vector of shape parameters
  
  # generate random draws for each dimension, then put them together into an array
  # using sapply for this
  
  mvg_draws &amp;lt;- sapply(alpha, function(x) rgamma(n, x))
  
  #return this value
  return(mvg_draws)
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I create another utility function to transform the output from the previous function to construct Dirichlet distributed variables.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;#Function to construct dirichlet distributed variables from gamma distributed variables

construct_dirichlet &amp;lt;- function(mvg_draws)
{
  # mvg_draws: output from the mv_gamma function. Typically an n x d matrix.  
  
  # Transform the columns of mvg_draws appropriately:
  # Divide each row with its sum
  
  const_dirichlet &amp;lt;- mvg_draws/rowSums(mvg_draws)
  
  #return this value
  return(const_dirichlet)
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now, a utility function to compare the distrbution of the constructed and actual random variables. Note that I use the &lt;span class=&#34;math inline&#34;&gt;\(\texttt{cramer.test()}\)&lt;/span&gt; function from the &lt;a href=&#34;https://cran.r-project.org/package=cramer&#34;&gt;cramer&lt;/a&gt; package to compare the multivariate draws.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;compare_distributions &amp;lt;- function(const_dirichlet, actual_dirichlet) {
  # const_dirichlet: n x d matrix containing the constructed dirichlet random draws
  # actual_dirichlet: n x d matrix containing the actual dirichlet random draws
  
  # get the cramer test result
  compare &amp;lt;- cramer.test(const_dirichlet, actual_dirichlet)
  
  # check the result of this hypothesis test
  if(compare$result==0) {
    cat(&amp;#39;Unable to reject hypothesis of equal distributions&amp;#39;)
  } else {
    cat(&amp;#39;Hypothesis of equal distributions should not be accepted&amp;#39;)
  }
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Lastly, another utility function to compare (via plot) the distribution of the constructed and actual random variables. I use the &lt;span class=&#34;math inline&#34;&gt;\(\texttt{rdirichlet()}\)&lt;/span&gt; function from the &lt;a href=&#34;https://cran.r-project.org/package=cramer&#34;&gt;MCMCpack&lt;/a&gt; package to generate draws from the dirichlet distribution.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;#Function to plot densities of the constructed and actual dirichlet distribution

plot_compare &amp;lt;- function(const_dirichlet, actual_dirichlet, d)
{
  # const_dirichlet: n x d matrix containing the constructed dirichlet random draws
  # actual_dirichlet: n x d matrix containing the actual dirichlet random draws
  # d: the column id/component of the draw needed from both constucted and actual for comparison

  # Get the number of data points
  n &amp;lt;- nrow(const_dirichlet)
  
  # Get the draws in the dimension or column whose distribution need to be compared to the actual
  dcol &amp;lt;- const_dirichlet[,d]
  
  # Get the draws in the dimension or column, from the actual draws
  dcol_actual &amp;lt;- actual_dirichlet[,d]
  
  #create a data.frame of these values
  plot_data &amp;lt;- data.frame(draws = c(dcol, dcol_actual), type = rep(c(&amp;#39;constructed&amp;#39;, &amp;#39;actual&amp;#39;)), each = n)
  
  #plot this function
  ggplot(data = plot_data, aes(x = draws, color = type)) + geom_density() + xlab(&amp;#39;draws&amp;#39;) + ylab(&amp;#39;density&amp;#39;)
  
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;dimensional-case&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;3 Dimensional Case&lt;/h1&gt;
&lt;p&gt;Let’s use the functions we just created. I follow the steps outlined in the introduction of this post.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(cramer)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Loading required package: boot&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;suppressPackageStartupMessages(library(MCMCpack))

# number of draws
n &amp;lt;- 1000

# multivariate shapre parameter
alpha &amp;lt;- c(1,2,3)

# get 3D IID gamma density draws
set.seed(100)
mvg_draws &amp;lt;- mv_gamma(rgamma, n, alpha)

# get the dirichlet draws from construction
const_dirichlet &amp;lt;- construct_dirichlet(mvg_draws)

# get the dirichlet draws from the actual distribution
set.seed(100)
actual_dirichlet &amp;lt;- rdirichlet(n, alpha)

# check if the draws come from the same underlying distribution
compare_distributions(const_dirichlet, actual_dirichlet)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Unable to reject hypothesis of equal distributions&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;As can be seen above, the null hypothesis that the underlying distributions are the same cannot be rejected.
Let’s also look at the empirical densities of each of the columns of the constructed and actual dirichlet distribution draws.&lt;/p&gt;
&lt;p&gt;Dimension 1:
&lt;img src=&#34;../../post/2020-05-31-dirichlet-distribution-from-gamma-distribution-simple-examples.en_files/figure-html/unnamed-chunk-6-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Dimension 2:
&lt;img src=&#34;../../post/2020-05-31-dirichlet-distribution-from-gamma-distribution-simple-examples.en_files/figure-html/unnamed-chunk-7-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Dimension 3:
&lt;img src=&#34;../../post/2020-05-31-dirichlet-distribution-from-gamma-distribution-simple-examples.en_files/figure-html/unnamed-chunk-8-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;These density plots look somewhat similar. When we increase the number of draws generated from both methods, these plots almost overlap:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# number of draws
n &amp;lt;- 100000

# multivariate shapre parameter
alpha &amp;lt;- c(1,2,3)

# get 3D IID gamma density draws
set.seed(100)
mvg_draws &amp;lt;- mv_gamma(rgamma, n, alpha)

# get the dirichlet draws from construction
const_dirichlet &amp;lt;- construct_dirichlet(mvg_draws)

# get the dirichlet draws from the actual distribution
set.seed(100)
actual_dirichlet &amp;lt;- rdirichlet(n, alpha)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Dimension 1:
&lt;img src=&#34;../../post/2020-05-31-dirichlet-distribution-from-gamma-distribution-simple-examples.en_files/figure-html/unnamed-chunk-10-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Dimension 2:
&lt;img src=&#34;../../post/2020-05-31-dirichlet-distribution-from-gamma-distribution-simple-examples.en_files/figure-html/unnamed-chunk-11-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Dimension 3:
&lt;img src=&#34;../../post/2020-05-31-dirichlet-distribution-from-gamma-distribution-simple-examples.en_files/figure-html/unnamed-chunk-12-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Comparing the draws for different values of &lt;span class=&#34;math inline&#34;&gt;\(d\)&lt;/span&gt; (i.e. different lengths of the &lt;span class=&#34;math inline&#34;&gt;\(alpha\)&lt;/span&gt; vector), is left as an exercise to the reader. The functions above can be re-used for different values of &lt;span class=&#34;math inline&#34;&gt;\(d\)&lt;/span&gt;, but must be modified accordingly to include sanity checks for inappropriate input values and edge cases, via &lt;a href=&#34;http://r-pkgs.had.co.nz/tests.html&#34;&gt;unit testing&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
</description>
    </item>
    
  </channel>
</rss>
